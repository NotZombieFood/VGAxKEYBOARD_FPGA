module VGA(
input clk,
input rst,
input r, g, b,
input ps2d, ps2c,
input rst_2,
output[7:0]blue,
output BLANK_N,
output o_pixel_clk,
output [7:0] green,
output hsync,
output [7:0] red,
output SYNC_N,
output vsync
);

logic pixel_clk;
logic [9:0] x, y;
logic vidon;
logic hsync_2, vsync_2;
logic doneKey;
logic letter_case;
logic [9:0] KeyData;
logic [31:0] teclado;
logic doneLCD;
logic en_mem;
logic [511:0] mem;
logic [9:0] wr_address_mem;
logic [9:0] rd_address_mem;
logic [511:0] wr_data_mem;
logic [9:0] columna;
logic [6:0] linea;
logic [511:0] bit_map;
logic borrar;
logic [28:0] puntero;
logic [511:0] data_puntero;
logic en_mem_b;
logic ignorar;
logic poSDoneKey;

assign en_mem_b = 0;


////////////////////////////////////////////////////////////Teclado///////////////////////////////////
posEdgeGenerator inst_posEdgeGenerator (.sig_a(doneKey), .rst(~reset), .clk(clk), .sig_a_risedge(poSDoneKey));

keyboard inst_keyboard (.clk(clk), .reset(~rst), .ps2d(ps2d), .ps2c(ps2c), .done(doneKey), .o_data(keyData));
key2lcd inst_key2lcd (.letter_case(letter_case), .scan_code(keyData), .lcd_code(teclado));
KeyFsm inst_KeyFsm	(.clk(clk), .rst(~rst),.doneKey (poSDoneKey),.keyData (keyData),.doneLCD (doneLCD),.upper (letter_case));


key2bit_map kbit_map(.letter_case(letter_case), .scan_code(KeyData), .bit_map(bit_map));
assign wr_address_mem = ((columna-1) + ((linea-1)*40));


always_ff @ (posedge clk) begin
		if (~rst_2) begin
			en_mem <= 1;
			puntero <= 0;
			wr_data_mem <= 0;
			columna <= columna + 1;
			borrar <= 0;
		end
		else if (~rst) begin
			en_mem <= 0;
			puntero <= 0;
			wr_data_mem<= 0;
			linea <= 1;
			columna <= 1;
			en_mem <= 0;
			borrar <= 0;
			ignorar <= 0;
		end
		else if (doneLCD) begin
			if (ignorar == 1) begin       /////ignorar
				en_mem <= 1;
				ignorar <= 0;
				wr_data_mem <= 232323;
			end
			else if (teclado == 9'h0f0) begin   //SOltar  tecla
				en_mem <= 1;
				wr_data_mem <= 456464;
				ignorar <= 1;
			end
			else begin
				en_mem <= 1;
				wr_data_mem <= 512'b
				columna <= columna + 1;
			end
		end
		else begin
			en_mem <= 1;
			wr_data_mem [479:0] <= data_puntero [479:0];
			if (puntero <= 3500000 ) begin
				puntero <= puntero + 1;
				wr_data_mem [511:480] <= data_puntero [511:480];
			end
			else begin
				puntero <= 0;
				wr_data_mem [511:480] <= ~data_puntero[511:480];
			end
		end
end
/*
always_ff @ (posedge clk) begin
	if (~rst) begin
		en_mem <= 0;
		wr_data_mem <= 0;
		columna <= 1;
		linea <= 1;
		borrar <= 0;
	end
	else if (doneLCD) begin
		if (teclado == 9'h 0C0) begin       /////Enter
			en_mem <= 0;
			wr_data_mem <= wr_data_mem;
			columna <= 1;
			if (linea <= 15)
				linea <= linea + 1;
			else 
				linea <= 1;
			borrar <= 0;	
		end
		else if (teclado == 9'h 108 ) begin ////Borrar
			en_mem <= 1;
			wr_data_mem <= 0;
			columna <= columna;
			linea <= linea;
			borrar <= 1;
		end
		else if (teclado == 9'h 0f0) begin   //Soltar tecla
			en_mem <= 0;
			wr_data_mem <= wr_data_mem;
			columna <= columna;
			linea <= linea;
			borrar <= 0;
		end
		else begin    ///otra tecla
			en_mem = 1;
			wr_data_mem <= bit_map;
			borrar <= 0;
			if (columna <= 40) begin
				columna <= columna + 1;
				linea <= linea;
			end
			else if (linea <= 15) begin
				columna <= 1;
				linea <= linea + 1;
			end
			else begin
				columna <= 1;
				linea <= 1;
			end
		end
	end
	else begin
		en_mem <= 0;
   	wr_data_mem  <= mem  ;
		linea <= linea;
		columna <= columna;
		if (borrar) begin
			if (columna > 1) 
				columna <= (columna - 1);
			else if (linea > 1) begin
				columna <= 40;
				linea <= (linea - 1);
			end
			else begin
				columna <= 40;
				linea <= 15;
			end
		end
		borrar <= 0;
	end
end
*/






///////////////////////////////////////////////////Memorias/////////////////////////////////////
/*RAM_1 memory(.clock(clk),
.address_a(wr_address_mem),
.address_b(rd_address_mem),
.data_a(wr_data_mem),
.wren_a(en_mem),
.wren_b(en_mem_b),
.q_a(data_puntero),
.q_b(mem),
.aclr(~rst)
);
*/

clock_divider clk_2(
.clk(clk),
.rst(~rst),
.clk_25Mhz(pixel_clk)
);


assign o_pixel_clk = pixel_clk;

frecuency_generator f_640x480(
.clk(pixel_clk),
.rst(~rst),
.hsync(hsync),
.vsync(vsync),
.x(x),
.y(y),
.vidon(vidon),
.blank(BLANK_N)
);

/*VGA_stripes stripes(
.x(x),
.y(y),
.vidon(vidon),
//.red(red),
//.green(green),
//.blue(blue)
);
*/

/*back_ground_color bg(
.g(g),
.r(r),
.b(b),
.vidon(vidon),
.red(red),
.green(green),
.blue(blue)
);
*/

print print_1(
 .x(x),
 .y(y),
 .r(r),
 .b(b),
 .g(g),
 .clk(clk),
 .vidon(vidon),
 .mem(mem),
 .rd_address_mem(rd_address_mem),
 .red(red),
 .blue(blue),
 .green(green)
 );
 

endmodule